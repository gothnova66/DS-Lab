#include <stdio.h>
#include <stdlib.h>

// Structure for a stack node
struct stack {
    int data;
    struct stack *next;
};

struct stack *top = NULL;

// Function declarations
struct stack *push(struct stack *, int);
struct stack *pop(struct stack *);
struct stack *display(struct stack *);
int peek(struct stack *);

int main() {
    int val, option;

    do {
        printf("\n***** STACK MENU *****");
        printf("\n1. PUSH");
        printf("\n2. POP");
        printf("\n3. PEEK");
        printf("\n4. DISPLAY");
        printf("\n5. EXIT");
        printf("\nEnter your option: ");
        scanf("%d", &option);

        switch(option) {
            case 1:
                printf("Enter the number to be pushed on stack: ");
                scanf("%d", &val);
                top = push(top, val);
                break;

            case 2:
                top = pop(top);
                break;

            case 3:
                val = peek(top);
                if (val != -1)
                    printf("The value at the top of the stack is: %d", val);
                else
                    printf("STACK IS EMPTY");
                break;

            case 4:
                top = display(top);
                break;

            case 5:
                printf("Exiting program.\n");
                break;

            default:
                printf("Invalid option. Please try again.");
        }
    } while(option != 5);

    return 0;
}

// Function to push an element onto the stack
struct stack *push(struct stack *top, int val) {
    struct stack *newNode = (struct stack *)malloc(sizeof(struct stack));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        return top;
    }
    newNode->data = val;
    newNode->next = top;
    top = newNode;
    return top;
}

// Function to pop an element from the stack
struct stack *pop(struct stack *top) {
    if (top == NULL) {
        printf("STACK UNDERFLOW\n");
        return top;
    }

    struct stack *temp = top;
    printf("The value being popped is: %d\n", temp->data);
    top = top->next;
    free(temp);
    return top;
}

// Function to peek the top element
int peek(struct stack *top) {
    if (top == NULL)
        return -1;
    else
        return top->data;
}

// Function to display the stack
struct stack *display(struct stack *top) {
    struct stack *ptr = top;
    if (ptr == NULL) {
        printf("STACK IS EMPTY\n");
    } else {
        printf("Stack contents (top to bottom):\n");
        while (ptr != NULL) {
            printf("%d\n", ptr->data);
            ptr = ptr->next;
        }
    }
    return top;
}
